<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Password Generator</title>
<style>
  @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap');

  :root {
    --primary-color: #6a11cb;
    --secondary-color: #2575fc;
    --background-color: #1e1e2f;
    --text-color: #e0e0e0;
    --accent-color: #ff6a00;
    --border-radius: 12px;
  }

  * {
    box-sizing: border-box;
  }

  body {
    margin: 0;
    background: var(--background-color);
    color: var(--text-color);
    font-family: 'Poppins', sans-serif;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100vh;
    padding: 1rem;
  }

  .container {
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    padding: 2.5rem 3rem;
    border-radius: var(--border-radius);
    width: 100%;
    max-width: 450px;
    box-shadow: 0 8px 24px rgba(101, 41, 255, 0.3);
  }

  h1 {
    text-align: center;
    font-weight: 600;
    font-size: 2.2rem;
    margin-bottom: 1.5rem;
  }

  label {
    display: block;
    margin-bottom: .3rem;
    font-weight: 600;
  }

  input[type="number"] {
    width: 100%;
    padding: 0.5rem;
    border-radius: 8px;
    border: none;
    margin-bottom: 1.5rem;
    font-size: 1rem;
    font-weight: 500;
  }

  .checkbox-group {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    margin-bottom: 1.5rem;
  }

  .checkbox-group label {
    font-weight: 500;
    cursor: pointer;
    user-select: none;
  }

  input[type="checkbox"] {
    margin-right: 0.5rem;
    cursor: pointer;
    transform: scale(1.15);
  }

  button.generate-btn {
    width: 100%;
    padding: 0.75rem;
    font-weight: 700;
    font-size: 1.1rem;
    background: var(--accent-color);
    border: none;
    border-radius: 8px;
    color: white;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  button.generate-btn:hover {
    background: #ff7f1a;
  }

  .password-output {
    margin-top: 1.5rem;
    background: rgba(255 255 255 / 0.15);
    padding: 1rem 1rem;
    border-radius: 8px;
    font-size: 1.3rem;
    font-weight: 600;
    text-align: center;
    word-break: break-all;
    user-select: all;
    position: relative;
  }

  button.copy-btn {
    position: absolute;
    top: 50%;
    right: 10px;
    transform: translateY(-50%);
    background: transparent;
    border: none;
    color: white;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 700;
    padding: 0.25rem 0.5rem;
    border-radius: 6px;
    background: rgba(255 255 255 / 0.2);
    transition: background-color 0.3s ease;
  }

  button.copy-btn:hover {
    background: rgba(255 255 255 / 0.4);
  }

  .message {
    margin-top: 0.75rem;
    text-align: center;
    font-weight: 500;
    color: #ffd54f;
    min-height: 1.2em;
  }
</style>
</head>
<body>
  <div class="container" role="main">
    <h1>Password Generator</h1>
    <label for="length">Password Length (8-64):</label>
    <input type="number" id="length" name="length" min="8" max="64" value="16" aria-describedby="length-desc" />
    <div id="length-desc" style="font-size: 0.85rem; margin-bottom: 1.5rem; color:#ccc;">
      Choose the desired length for your password
    </div>

    <div class="checkbox-group" role="group" aria-labelledby="criteria-label">
      <span id="criteria-label" style="font-weight: 600; margin-bottom: 0.5rem; display:block;">Include characters:</span>
      <label><input type="checkbox" id="include-uppercase" checked /> Uppercase Letters (A-Z)</label>
      <label><input type="checkbox" id="include-lowercase" checked /> Lowercase Letters (a-z)</label>
      <label><input type="checkbox" id="include-numbers" checked /> Numbers (0-9)</label>
      <label><input type="checkbox" id="include-symbols" /> Special Characters (!@#$%^&*)</label>
    </div>

    <button class="generate-btn" id="generate-btn" aria-live="polite">Generate Password</button>

    <div class="password-output" id="password-output" aria-live="polite" aria-atomic="true" tabindex="0">
      Your secure password will appear here
      <button class="copy-btn" id="copy-btn" title="Copy to clipboard">Copy</button>
    </div>
    <div class="message" id="message" aria-live="polite" role="alert"></div>
  </div>

  <script>
    (() => {
      const lengthInput = document.getElementById('length');
      const uppercaseCheckbox = document.getElementById('include-uppercase');
      const lowercaseCheckbox = document.getElementById('include-lowercase');
      const numbersCheckbox = document.getElementById('include-numbers');
      const symbolsCheckbox = document.getElementById('include-symbols');
      const generateBtn = document.getElementById('generate-btn');
      const passwordOutput = document.getElementById('password-output');
      const copyBtn = document.getElementById('copy-btn');
      const message = document.getElementById('message');

      const upperChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
      const lowerChars = 'abcdefghijklmnopqrstuvwxyz';
      const numberChars = '0123456789';
      const symbolChars = '!@#$%^&*()-_=+[]{}|;:,.<>?';

      function generatePassword() {
        let length = parseInt(lengthInput.value, 10);
        if (isNaN(length) || length < 8 || length > 64) {
          message.textContent = 'Please enter a length between 8 and 64.';
          return;
        }
        message.textContent = '';

        const useUpper = uppercaseCheckbox.checked;
        const useLower = lowercaseCheckbox.checked;
        const useNumbers = numbersCheckbox.checked;
        const useSymbols = symbolsCheckbox.checked;

        if (!useUpper && !useLower && !useNumbers && !useSymbols) {
          message.textContent = 'Please select at least one character type.';
          return;
        }

        let allChars = '';
        if (useUpper) allChars += upperChars;
        if (useLower) allChars += lowerChars;
        if (useNumbers) allChars += numberChars;
        if (useSymbols) allChars += symbolChars;

        let password = '';
        // Ensuring at least one char from each selected category is included
        let requiredChars = [];
        if (useUpper) requiredChars.push(randomChar(upperChars));
        if (useLower) requiredChars.push(randomChar(lowerChars));
        if (useNumbers) requiredChars.push(randomChar(numberChars));
        if (useSymbols) requiredChars.push(randomChar(symbolChars));

        for (let i = 0; i < length - requiredChars.length; i++) {
          password += randomChar(allChars);
        }

        // Insert required chars at random positions in password
        password = password.split('');
        requiredChars.forEach(char => {
          let pos = Math.floor(Math.random() * (password.length + 1));
          password.splice(pos, 0, char);
        });

        password = password.join('');
        passwordOutput.childNodes[0].nodeValue = password;
        message.textContent = 'Password generated! You can copy it now.';
        passwordOutput.focus();
      }

      function randomChar(str) {
        return str.charAt(Math.floor(Math.random() * str.length));
      }

      generateBtn.addEventListener('click', generatePassword);

      copyBtn.addEventListener('click', () => {
        const text = passwordOutput.textContent;
        if (text && text !== 'Your secure password will appear here') {
          navigator.clipboard.writeText(text).then(() => {
            message.textContent = 'Password copied to clipboard!';
          }).catch(() => {
            message.textContent = 'Failed to copy password.';
          });
        } else {
          message.textContent = 'Nothing to copy!';
        }
      });

      // Generate an initial password on load
      generatePassword();
    })();
  </script>
</body>
</html>

